
#### excitation

excitationSimulate: 1        #simulate torques instead of using measurements to save to data files (use e.g. with Gazebo)
exciteMethod: null #'yarp'         #currently 'yarp', 'ros' or null
useDeg: 1                    #encode angles in degrees for excitation (internal and data is always in rad)

optimizeTrajectory: 0        #find new parameters with optimization or load previous params from file (if no file exists, use random)
showOptimizationGraph: 1     #display updating graph during trajectory optimization
showOptimizationTrajs: 1     #display the trajectory plot after each optimization step
useGlobalOptimization: 1     #do global optimization before using local refinement (does not use initial values)
globalOptIterations: 10
localOptIterations: 2        #how many optimizer iterations to use. this is not necessarily equal to function calls (~50 times of this)
maxFun: 250                  #limit objective function evaluations to this value (not used currently)
minTolConstr: 0.01         #threshold for being within constraints (only used for display)

# initial values to start optimization from (if using global opt not really important)
trajectoryPulseInit: 0.75    #determines length of one period of trajectory (smaller=longer)
trajectoryPulseMin:  0.5
trajectoryPulseMax:  1.0
trajectoryCoeffInit: 0.1     #set this as high as possible without violating velocity constraints (see output after start)
trajectoryCoeffMin: -0.4     #determines in which range the chosen params have to be (smaller=lower vel)
trajectoryCoeffMax:  0.4
trajectoryAngleMin: -10.0    #determines the range in which the pulsation center for each joint will be (in degrees)
trajectoryAngleMax: 10.0

# instead of one range, define individual ranges for each link. initial is the center of these
# ranges. If ..AngleMin/Max is to be used for all of them, set to null
trajectoryAngleRanges:
    [[-10.9745248069, 8.9797344371],
     [-18.9543738355, 8.9746393985],
     [-27.938974128, 13.9696016556],
     [10.0,          30.929013234],
     [-12.9596980573, 5.9797344371],
     [-8.9771869178, 8.9771869178]
    ]
#    [[-49.9745248069, 39.9797344371],
#     [-89.9543738355, 49.9746393985],
#     [-119.938974128, 59.9696016556],
#     [0.0,            139.929013234],
#     [-79.9596980573, 39.9797344371],
#     [-44.9771869178, 44.9771869178]
#    ]

# manual angle limits: pairs of upper and lower (in degrees). put in null to use values from URDF
# (or leave completely empty)
ovrPosLimit:
    - null
    - null 
    - null
    - null
    - null
    - null
    - null

# constrain to minimal velocity (percentage of maximum) for each joint (better excitation of parameters)
minVelocityConstraint: 0
minVelocityPercentage: 0.1

#### identification

# fixed or floating-base dynamics
floatingBase: 1
baseLinkName: 'Waist'

# identify torque offsets as additional parameters
identifyTorqueOffsets: 1

# simulate torques from target values, don't use both
simulateTorques: 0    #simulate torque for measured angles etc using idyntree (instead of reading from data)
addNoise: 0 #0.05  #additional percentage of zero-mean white noise for simulated or measured torques

# almost zero threshold for QR, SVD and other things
minTol: 0.001

## data processing and selection

# determine number of samples to use
# (Khalil recommends about 500 times number of parameters to identify)
startOffset: 650    #how many samples from the beginning of each measurement file are skipped
skipSamples: 5    #how many values to skip before using the next sample

# whether only "good" data is being selected or simply all is used (selected by condition number)
selectBlocksFromMeasurements: 0
blockSize: 50  # needs to be at least as much as parameters so regressor is square or higher
selectBestPerenctage: 70   #select percentage of blocks sorted by condition number

removeNearZero: 0  #remove samples that have almost zero velocity
minVel: 0.05        #velocity that one of a sample's joints needs to have for the sample to be used (rad/s)

# IMU processing (floating base)
waitForZeroAcc: 1   #when integrating IMU linear acceleration, wait for first time with (almost) no acceleration to start at zero velocity
zeroAccThresh: 0.4  #threshold below which acceleration is considered to be zero (m/s^2)

## use constrained SDP to solve OLS

# constrain std params to physical consistent space to only achieve physical consistent parameters
# (currently this also does the estimation, so previously selecting another method has no effect)
# if only torque estimation is desired, not using this self.option might give a better model
# accuracy with approriate parameters
useConsistencyConstraints: 0

# constrain parameters for links more than a certain condition number to the a priori values
# (to prevent very big changes for parameters that are not expressed in the data)
noChange: 1
noChangeThresh: 300

# restrict COM to smallest enclosing box of STL Mesh (taken from <visual> in URDF)
restrictCOMtoHull: 0
# set extra scaling for mesh (e.g. if it is clear that COM will not be at outer border of
# geometry or that initial CAD data is too large)
hullScaling: 1.0

# constrain overall mass
limitOverallMass: 0
# if overall mass is set, limit to this value. If null, limit to overall a priori mass +- 30%
limitMassVal: null #16

# enforce the same upper limit for each link mass
limitMassValPerLink: null #3

# or enforce staying around the a priori masses (only set this or a combination of the other
# two mass limiting self.options to prevent constraint conflicts!)
limitMassToApriori: 1
limitMassAprioriBoundary: 0.5     #allowed change of CAD value in both +- directions (1.0 = 100%)

# whether to take out masses to be identified because they are e.g.
# well known or introduce problems
# (essential params or when using feasability constraints)
dontIdentifyMasses: 0

# define constraints for link symmetries (e.g. left and right arm),
# tuples of two parameters ids each that should be equal and 1/-1 to allow negative symmetric
symmetryConstraints: []

## other forms of OLS

# use previously known CAD parameters to identify parameter error, estimates parameters closer to
# known ones (taken from URDF file)
# for some methods, this gives parameters that are more likely to be consistent
# (don't use with constrained SDP solver)
useAPriori: 0

# identify and use direct standard with essential parameters
useEssentialParams: 0

# whether to include linear dependent columns in essential params or not
useDependents: 1

# use weighted least squares(WLS) instead of ordinary least squares
# needs small condition number, otherwise might amplify some parameters too much as the
# covariance estimation can be off (also assumes that error is zero mean and normal
# distributed)
useWLS: 0

# whether to filter the regressor columns (cutoff frequency is system dependent)
# mostly not improving results
filterRegressor: 0

## output and debugging

createPlots: 1               #create or show plots of measurements and estimated values
outputModule: 'html'         #how to output plots and other stuff ['matplotlib', 'html]
outputFilename: 'output_walkman.html'    #specify custom filename for html output
plotBaseDynamics: 0          #when using floating base, plot base forces or not
plotPerJoint: 1              #plot each joint with error in one graph

# self.options for console output
showMemUsage: 0              #print used memory for different variables
showTiming: 0                #show times various steps have taken
showRandomRegressor: 0       #show 2d plot of random regressor
showErrorHistogram: 0        #show estimation error distribution
showEssentialSteps: 0        #stop after every reduction step and show values
outputBarycentric: 0         #output all values in barycentric (e.g. urdf) form
showStandardParams: 1        #display a list of identified standard params
showBaseParams: 0            #display a list of identified base params (if appliable)
showTriangleConsistency: 0   #show per-link consistency including triangle inequality
verbose: 1                   #show more messages

# which parameters to use when estimating torques for validation. Set to one of
# ['base', 'std', 'std_direct', 'urdf']
estimateWith: 'std'
