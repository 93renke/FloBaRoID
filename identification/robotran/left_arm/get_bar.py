
import numpy as np

#return the barycentric masses
def getMass_bar(m):
    mb1 = m[3]+m[4]+m[5]+m[6]+m[7]+m[8]+m[9]
    mb4 = m[4]+m[5]+m[6]+m[7]+m[8]+m[9]
    mb5 = m[5]+m[6]+m[7]+m[8]+m[9]
    mb6 = m[6]+m[7]+m[8]+m[9]
    mb7 = m[7]+m[8]+m[9]
    mb8 = m[8]+m[9]
    mb9 = m[9]

    mb = np.array([mb1, mb4, mb5, mb6, mb7, mb8, mb9]) 
    return mb

#return the barycentric CoM
def getCoM_bar(m,l,d,mb):
    b31 = m[3]*l[1,3]
    b32 = m[3]*l[2,3]+mb[1]*d[2,4]
    b33 = m[3]*l[3,3]+mb[1]*d[3,4]
    b41 = m[4]*l[1,4]
    b42 = m[4]*l[2,4]
    b43 = m[4]*l[3,4]+mb[2]*d[3,5]
    b51 = m[5]*l[1,5]+mb[3]*d[1,6]
    b52 = m[5]*l[2,5]
    b53 = m[5]*l[3,5]+mb[3]*d[3,6]
    b61 = m[6]*l[1,6]+mb[4]*d[1,7]
    b62 = m[6]*l[2,6]
    b63 = m[6]*l[3,6]+mb[4]*d[3,7]
    b71 = m[7]*l[1,7]
    b72 = m[7]*l[2,7]
    b73 = m[7]*l[3,7]
    b81 = m[8]*l[1,8]
    b82 = m[8]*l[2,8]
    b83 = m[8]*l[3,8]+mb[6]*d[3,9]
    b91 = m[9]*l[1,9]
    b92 = m[9]*l[2,9]
    b93 = m[9]*l[3,9]
    
    b = np.array([b31,b32,b33,b41,b42,b43,b51,b52,b53,b61,b62,b63,b71,b72,b73,b81,b82,b83,b91,b92,b93])
    return b


#return barycentric inertia
def getIn_bar(m,l,d,In,mb):
    K311 = In[1][3]+m[3]*l[2][3]*l[2][3]+m[3]*l[3][3]*l[3][3]+mb[1]*d[2][4]*d[2][4]+mb[1]*d[3][4]*d[3][4]
    K312 = In[2][3]-m[3]*l[1][3]*l[2][3]
    K313 = In[3][3]-m[3]*l[1][3]*l[3][3]
    K322 = In[5][3]+m[3]*l[1][3]*l[1][3]+m[3]*l[3][3]*l[3][3]+mb[1]*d[3][4]*d[3][4]
    K323 = In[6][3]-m[3]*l[2][3]*l[3][3]-mb[1]*d[2][4]*d[3][4]
    K333 = In[9][3]+m[3]*l[1][3]*l[1][3]+m[3]*l[2][3]*l[2][3]+mb[1]*d[2][4]*d[2][4]
    K411 = In[1][4]+m[4]*l[2][4]*l[2][4]+m[4]*l[3][4]*l[3][4]+mb[2]*d[3][5]*d[3][5]
    K412 = In[2][4]-m[4]*l[1][4]*l[2][4]
    K413 = In[3][4]-m[4]*l[1][4]*l[3][4]
    K422 = In[5][4]+m[4]*l[1][4]*l[1][4]+m[4]*l[3][4]*l[3][4]+mb[2]*d[3][5]*d[3][5]
    K423 = In[6][4]-m[4]*l[2][4]*l[3][4]
    K433 = In[9][4]+m[4]*l[1][4]*l[1][4]+m[4]*l[2][4]*l[2][4]
    K511 = In[1][5]+m[5]*l[2][5]*l[2][5]+m[5]*l[3][5]*l[3][5]+mb[3]*d[3][6]*d[3][6]
    K512 = In[2][5]-m[5]*l[1][5]*l[2][5]
    K513 = In[3][5]-m[5]*l[1][5]*l[3][5]-mb[3]*d[1][6]*d[3][6]
    K522 = In[5][5]+m[5]*l[1][5]*l[1][5]+m[5]*l[3][5]*l[3][5]+mb[3]*d[1][6]*d[1][6]+mb[3]*d[3][6]*d[3][6]
    K523 = In[6][5]-m[5]*l[2][5]*l[3][5]
    K533 = In[9][5]+m[5]*l[1][5]*l[1][5]+m[5]*l[2][5]*l[2][5]+mb[3]*d[1][6]*d[1][6]
    K611 = In[1][6]+m[6]*l[2][6]*l[2][6]+m[6]*l[3][6]*l[3][6]+mb[4]*d[3][7]*d[3][7]
    K612 = In[2][6]-m[6]*l[1][6]*l[2][6]
    K613 = In[3][6]-m[6]*l[1][6]*l[3][6]-mb[4]*d[1][7]*d[3][7]
    K622 = In[5][6]+m[6]*l[1][6]*l[1][6]+m[6]*l[3][6]*l[3][6]+mb[4]*d[1][7]*d[1][7]+mb[4]*d[3][7]*d[3][7]
    K623 = In[6][6]-m[6]*l[2][6]*l[3][6]
    K633 = In[9][6]+m[6]*l[1][6]*l[1][6]+m[6]*l[2][6]*l[2][6]+mb[4]*d[1][7]*d[1][7]
    K711 = In[1][7]+m[7]*l[2][7]*l[2][7]+m[7]*l[3][7]*l[3][7]
    K712 = In[2][7]-m[7]*l[1][7]*l[2][7]
    K713 = In[3][7]-m[7]*l[1][7]*l[3][7]
    K722 = In[5][7]+m[7]*l[1][7]*l[1][7]+m[7]*l[3][7]*l[3][7]
    K723 = In[6][7]-m[7]*l[2][7]*l[3][7]
    K733 = In[9][7]+m[7]*l[1][7]*l[1][7]+m[7]*l[2][7]*l[2][7]
    K811 = In[1][8]+m[8]*l[2][8]*l[2][8]+m[8]*l[3][8]*l[3][8]+mb[6]*d[3][9]*d[3][9]
    K812 = In[2][8]-m[8]*l[1][8]*l[2][8]
    K813 = In[3][8]-m[8]*l[1][8]*l[3][8]
    K822 = In[5][8]+m[8]*l[1][8]*l[1][8]+m[8]*l[3][8]*l[3][8]+mb[6]*d[3][9]*d[3][9]
    K823 = In[6][8]-m[8]*l[2][8]*l[3][8]
    K833 = In[9][8]+m[8]*l[1][8]*l[1][8]+m[8]*l[2][8]*l[2][8]
    K911 = In[1][9]+m[9]*l[2][9]*l[2][9]+m[9]*l[3][9]*l[3][9]
    K912 = In[2][9]-m[9]*l[1][9]*l[2][9]
    K913 = In[3][9]-m[9]*l[1][9]*l[3][9]
    K922 = In[5][9]+m[9]*l[1][9]*l[1][9]+m[9]*l[3][9]*l[3][9]
    K923 = In[6][9]-m[9]*l[2][9]*l[3][9]
    K933 = In[9][9]+m[9]*l[1][9]*l[1][9]+m[9]*l[2][9]*l[2][9]
    
    K = np.array([K311,K312,K313,K322,K323,K333,K411,K412,K413,K422,K423,K433,K511,K512,K513,K522,K523,K533,K611,K612,K613,K622,K623,K633,K711,K712,K713,K722,K723,K733,K811,K812,K813,K822,K823,K833,K911,K912,K913,K922,K923,K933])
    return K


def get_bar(m,l,d,In):
    m_bar = getMass_bar(m)
    CoM_bar = getCoM_bar(m,l,d,m_bar)
    In_bar = getIn_bar(m,l,d,In,m_bar)

    bar = np.concatenate([m_bar, CoM_bar, In_bar])

    return bar